{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styles","screen","width","height","margin","display","alignItems","justifyContent","backgroundColor","padding","userSelect","numberBox","color","borderColor","borderWidth","borderStyle","numberContainer","fontFamily","fontSize","textAlign","fontWeight","pullButton","borderRadius","lineHeight","cursor","PullButton","props","react_default","a","createElement","onClick","style","NumberBox","cls","number","className","Won","Screen","state","won","numbers","generateNumber","Math","floor","random","generateNumbers","_this","pull","reduce","acc","setState","this","_this$state","App_Won","map","i","App_NumberBox","key","App_PullButton","React","Component","App","App_Screen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAS,CACbC,OAAQ,CACNC,MAAO,QACPC,OAAQ,QACRC,OAAQ,cACRC,QAAS,OACTC,WAAY,SACZC,eAAgB,gBAChBC,gBAAiB,oBACjBC,QAAS,OACTC,WAAY,QAEdC,UAAW,CACTT,MAAO,GACPC,OAAQ,IACRE,QAAS,OACTE,eAAgB,SAChBD,WAAY,SACZE,gBAAiB,OACjBI,MAAO,mBACPC,YAAa,oBACbC,YAAa,EACbC,YAAa,SAEfC,gBAAiB,CACfC,WAAY,wBACZC,SAAU,GACVC,UAAW,SACXd,QAAS,QACTe,WAAY,UAEdC,WAAY,CACVnB,MAAO,GACPC,OAAQ,GACRK,gBAAiB,MACjBI,MAAO,QACPU,aAAc,GACdH,UAAW,SACXd,QAAS,OACTE,eAAgB,SAChBD,WAAY,SACZiB,WAAY,IACZC,OAAQ,aAINC,EAAa,SAAAC,GAAK,OACtBC,EAAAC,EAAAC,cAAA,OAAKC,QAASJ,EAAMI,QAASC,MAAO/B,EAAOqB,YAA3C,SAKIW,EAAY,SAAAN,GAChB,IAAMO,EAAuB,IAAjBP,EAAMQ,OAAe,WAAa,GAE9C,OACEP,EAAAC,EAAAC,cAAA,OAAKE,MAAO/B,EAAOW,UAAWwB,UAAWF,GACvCN,EAAAC,EAAAC,cAAA,QAAME,MAAO/B,EAAOgB,iBAAkBU,EAAMQ,UAK5CE,EAAM,SAAAV,GAAK,OAAIC,EAAAC,EAAAC,cAAA,iCAEfQ,6MACJC,MAAQ,CACNC,KAAK,EACLC,QAAS,MAGXC,eAAiB,kBAAMC,KAAKC,MAAsB,GAAhBD,KAAKE,aAEvCC,gBAAkB,WAChB,MAAO,CACLC,EAAKL,iBACLK,EAAKL,iBACLK,EAAKL,qBAITM,KAAO,WACL,IAAMP,EAAUM,EAAKD,kBAEfN,EAAMC,EAAQQ,OAAO,SAACC,EAAKf,GAC/B,OAAOe,GAAkB,IAAXf,IACb,GAEHY,EAAKI,SAAS,CAAEX,MAAKC,gGAIrBW,KAAKJ,wCAGE,IAAAK,EACkBD,KAAKb,MAAtBC,EADDa,EACCb,IAAKC,EADNY,EACMZ,QAEb,OACEb,EAAAC,EAAAC,cAAA,OAAKE,MAAO/B,EAAOC,QAChBsC,GAAOZ,EAAAC,EAAAC,cAACwB,EAAD,OACNd,GACAC,EAAQc,IAAI,SAACpB,EAAQqB,GAAT,OAAe5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAWC,IAAKF,EAAGrB,OAAQA,OACtDK,GAAOZ,EAAAC,EAAAC,cAAC6B,EAAD,CAAY5B,QAASqB,KAAKJ,eAtCtBY,IAAMC,WAsDZC,mLARX,OACElC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAD,cAJUF,aCnGEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c03111e1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst styles = {\r\n  screen: {\r\n    width: \"300px\",\r\n    height: \"120px\",\r\n    margin: \"50px auto 0\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    backgroundColor: \"rgb(249, 171, 27)\",\r\n    padding: \"20px\",\r\n    userSelect: \"none\"\r\n  },\r\n  numberBox: {\r\n    width: 70,\r\n    height: 100,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#FFF\",\r\n    color: \"rgb(230, 85, 85)\",\r\n    borderColor: \"rgb(181, 148, 91)\",\r\n    borderWidth: 3,\r\n    borderStyle: \"solid\"\r\n  },\r\n  numberContainer: {\r\n    fontFamily: \"'Pattaya', sans-serif\",\r\n    fontSize: 48,\r\n    textAlign: \"center\",\r\n    display: \"block\",\r\n    fontWeight: \"bolder\"\r\n  },\r\n  pullButton: {\r\n    width: 50,\r\n    height: 50,\r\n    backgroundColor: \"red\",\r\n    color: \"white\",\r\n    borderRadius: 45,\r\n    textAlign: \"center\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    lineHeight: 1.5,\r\n    cursor: \"pointer\"\r\n  }\r\n};\r\n\r\nconst PullButton = props => (\r\n  <div onClick={props.onClick} style={styles.pullButton}>\r\n    Pull\r\n  </div>\r\n);\r\n\r\nconst NumberBox = props => {\r\n  const cls = props.number === 7 ? \"imageRot\" : \"\";\r\n\r\n  return (\r\n    <div style={styles.numberBox} className={cls}>\r\n      <span style={styles.numberContainer}>{props.number}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Won = props => <div>You won! Jackpot!</div>;\r\n\r\nclass Screen extends React.Component {\r\n  state = {\r\n    won: false,\r\n    numbers: []\r\n  };\r\n\r\n  generateNumber = () => Math.floor(Math.random() * 10);\r\n\r\n  generateNumbers = () => {\r\n    return [\r\n      this.generateNumber(),\r\n      this.generateNumber(),\r\n      this.generateNumber()\r\n    ];\r\n  };\r\n\r\n  pull = () => {\r\n    const numbers = this.generateNumbers();\r\n\r\n    const won = numbers.reduce((acc, number) => {\r\n      return acc && number === 7;\r\n    }, true);\r\n\r\n    this.setState({ won, numbers });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.pull();\r\n  }\r\n\r\n  render() {\r\n    const { won, numbers } = this.state;\r\n\r\n    return (\r\n      <div style={styles.screen}>\r\n        {won && <Won />}\r\n        {!won &&\r\n          numbers.map((number, i) => <NumberBox key={i} number={number} />)}\r\n        {!won && <PullButton onClick={this.pull} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Screen />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}